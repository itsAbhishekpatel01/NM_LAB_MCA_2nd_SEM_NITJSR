#include <iostream>
using namespace std;

class Queue {
  int front,rear;
  int size;
  int *arr;
  public:
  Queue(int s){
    front = rear = -1;
    size = s;
    arr = new int[s];
  }
  void enQueue(int data);
  int deQueue();
  void displayQueue();
}
;

void Queue::enQueue(int data){
  if((front==0 && rear==size-1)||((rear+1)%size==front)){
    cout<<"\nQueue is full.";
    return;
  }
  else if(front==-1){ //inserting first element
  front = rear = 0;
  arr[front]=data;
  }
  else if(rear==size-1 && front!=0){
    rear = 0;
    arr[rear] = data;
  }
  else {
    rear++;
    arr[rear] = data;
  }
}

int Queue::deQueue(){
  if(front==-1){
    cout<<"\nQueue is empty";
    return -1;
  }
  int data = arr[front];
  arr[front]=-1;
  if(front==rear){
    front = rear = -1;
  }
  else if (front==size-1) front=0;
  else front++;
  return data;
}

void Queue::displayQueue(){
  if(front==-1){
    cout<<"\nQueue is empty.";
    return;
  }
  cout<<"\nElements in circular queue are: ";
  if(rear>=front){
    for(int i=front;i<=rear;i++) cout<<arr[i]<<" ";
  }
  else {
    for(int i=front;i<size;i++) cout<<arr[i]<<" ";
    for(int i=0;i<=rear;i++) cout<<arr[i]<<" ";
  }
}

int main()
{
    Queue q(5);
 
    // Inserting elements in Circular Queue
    q.enQueue(14);
    q.enQueue(22);
    q.enQueue(13);
    q.enQueue(-6);
 
    // Display elements present in Circular Queue
    q.displayQueue();
 
    // Deleting elements from Circular Queue
    printf("\nDeleted value = %d", q.deQueue());
    printf("\nDeleted value = %d", q.deQueue());
 
    q.displayQueue();
 
    q.enQueue(9);
    q.enQueue(20);
    q.enQueue(5);
 
    q.displayQueue();
 
    q.enQueue(20);
    return 0;
}
